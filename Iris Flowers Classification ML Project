{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    },
    "colab": {
      "name": "Iris.ipynb",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/swapnil2001/LGMVIP-DataScience/blob/main/Iris.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hK2hA2iNlyOo"
      },
      "source": [
        "## **Author : Vivek Rajendra Dhokane**\n",
        "\n",
        "## **DATASCIENCE** **SEPTEMBER** **2021** **BATCH** **INTERN** \n",
        "\n",
        "## **LetsGrowMore VIP**\n",
        "\n",
        "## **TASK 1:  Iris Flowers Classification ML Project**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1xFdF_UQjmhY"
      },
      "source": [
        "## 1. Import Library"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cTvc7nDxjmhl"
      },
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "get_ipython().run_line_magic('matplotlib', 'inline')\n",
        "import seaborn as sns"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MDALWxBVjmhq"
      },
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import accuracy_score\n"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YcB_YY-Yjmhr"
      },
      "source": [
        "## 2. Load data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1GJ8Bk82jmht"
      },
      "source": [
        "data=pd.read_csv(\"iris.csv\")"
      ],
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jP-jc-Wpjmhu"
      },
      "source": [
        "## 3. undestanding the data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SEZqwZb8jmhw",
        "outputId": "e70a216a-2017-426f-e97d-d72be281be0a"
      },
      "source": [
        "data.info()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 150 entries, 0 to 149\n",
            "Data columns (total 5 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   sepal length   150 non-null    float64\n",
            " 1   sepal width    150 non-null    float64\n",
            " 2    petal length  150 non-null    float64\n",
            " 3   petal width    150 non-null    float64\n",
            " 4   class          150 non-null    object \n",
            "dtypes: float64(4), object(1)\n",
            "memory usage: 6.0+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "4ApvTeLPjmh1",
        "outputId": "95496c4a-0ff4-4127-bb06-c37aa8960f50"
      },
      "source": [
        "data. describe()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal length</th>\n",
              "      <th>sepal width</th>\n",
              "      <th>petal length</th>\n",
              "      <th>petal width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>150.000000</td>\n",
              "      <td>150.000000</td>\n",
              "      <td>150.000000</td>\n",
              "      <td>150.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>5.843333</td>\n",
              "      <td>3.054000</td>\n",
              "      <td>3.758667</td>\n",
              "      <td>1.198667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.828066</td>\n",
              "      <td>0.433594</td>\n",
              "      <td>1.764420</td>\n",
              "      <td>0.763161</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>4.300000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>5.100000</td>\n",
              "      <td>2.800000</td>\n",
              "      <td>1.600000</td>\n",
              "      <td>0.300000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>5.800000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>4.350000</td>\n",
              "      <td>1.300000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>6.400000</td>\n",
              "      <td>3.300000</td>\n",
              "      <td>5.100000</td>\n",
              "      <td>1.800000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>7.900000</td>\n",
              "      <td>4.400000</td>\n",
              "      <td>6.900000</td>\n",
              "      <td>2.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       sepal length  sepal width   petal length  petal width\n",
              "count    150.000000   150.000000     150.000000   150.000000\n",
              "mean       5.843333     3.054000       3.758667     1.198667\n",
              "std        0.828066     0.433594       1.764420     0.763161\n",
              "min        4.300000     2.000000       1.000000     0.100000\n",
              "25%        5.100000     2.800000       1.600000     0.300000\n",
              "50%        5.800000     3.000000       4.350000     1.300000\n",
              "75%        6.400000     3.300000       5.100000     1.800000\n",
              "max        7.900000     4.400000       6.900000     2.500000"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "ukG2JLyUjmh3",
        "outputId": "fa3c9272-1992-4859-838f-59937e0ef778"
      },
      "source": [
        "data.head()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal length</th>\n",
              "      <th>sepal width</th>\n",
              "      <th>petal length</th>\n",
              "      <th>petal width</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   sepal length  sepal width   petal length  petal width        class\n",
              "0           5.1          3.5            1.4          0.2  Iris-setosa\n",
              "1           4.9          3.0            1.4          0.2  Iris-setosa\n",
              "2           4.7          3.2            1.3          0.2  Iris-setosa\n",
              "3           4.6          3.1            1.5          0.2  Iris-setosa\n",
              "4           5.0          3.6            1.4          0.2  Iris-setosa"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "q1xCmj_7jmh5",
        "outputId": "247ab655-5b4f-4172-ee01-848a2d302133"
      },
      "source": [
        "data.tail()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal length</th>\n",
              "      <th>sepal width</th>\n",
              "      <th>petal length</th>\n",
              "      <th>petal width</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>145</th>\n",
              "      <td>6.7</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.2</td>\n",
              "      <td>2.3</td>\n",
              "      <td>Iris-virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>146</th>\n",
              "      <td>6.3</td>\n",
              "      <td>2.5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.9</td>\n",
              "      <td>Iris-virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>147</th>\n",
              "      <td>6.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>Iris-virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>148</th>\n",
              "      <td>6.2</td>\n",
              "      <td>3.4</td>\n",
              "      <td>5.4</td>\n",
              "      <td>2.3</td>\n",
              "      <td>Iris-virginica</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149</th>\n",
              "      <td>5.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.1</td>\n",
              "      <td>1.8</td>\n",
              "      <td>Iris-virginica</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     sepal length  sepal width   petal length  petal width           class\n",
              "145           6.7          3.0            5.2          2.3  Iris-virginica\n",
              "146           6.3          2.5            5.0          1.9  Iris-virginica\n",
              "147           6.5          3.0            5.2          2.0  Iris-virginica\n",
              "148           6.2          3.4            5.4          2.3  Iris-virginica\n",
              "149           5.9          3.0            5.1          1.8  Iris-virginica"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rL1Y1Hl8jmh7"
      },
      "source": [
        "## 4. Data Pre processing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "gDyzd7fQjmh8",
        "outputId": "3957b7c7-1367-4099-9e5e-7602e2aaaee5"
      },
      "source": [
        "#label encode\n",
        "data=data.replace(to_replace={'class':{'Iris-setosa':0,'Iris-versicolor':1,'Iris-virginica':2}})\n",
        "data.head()"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal length</th>\n",
              "      <th>sepal width</th>\n",
              "      <th>petal length</th>\n",
              "      <th>petal width</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   sepal length  sepal width   petal length  petal width  class\n",
              "0           5.1          3.5            1.4          0.2      0\n",
              "1           4.9          3.0            1.4          0.2      0\n",
              "2           4.7          3.2            1.3          0.2      0\n",
              "3           4.6          3.1            1.5          0.2      0\n",
              "4           5.0          3.6            1.4          0.2      0"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pPjffUo1jmh9"
      },
      "source": [
        "#change data tpe of class attribut to catgoicak\n",
        "\n",
        "data['class'] = data['class'].astype('category').cat.codes"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CJfie-QDjmh-"
      },
      "source": [
        "## 5. Explantory data analysis"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "u1-Nxukzjmh_",
        "outputId": "fc80f97d-8ec1-457d-9844-61907f4ab3d8"
      },
      "source": [
        "sns.countplot(y=data['class'],data=data)\n",
        "plt.ylabel('target classes')\n",
        "plt.xlabel('count of each Target class')\n",
        "plt.show()"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "rw7-ncBvjmiA",
        "outputId": "34998ceb-250e-4fa1-ec7a-77766f02506a"
      },
      "source": [
        "#check the destibution of all featues\n",
        "data.hist(bins=15)\n",
        "plt.title('Featue distibution')\n",
        "plt.show()"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 6 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 340
        },
        "id": "ID8sDJtijmiC",
        "outputId": "1c3c2084-05cb-4c56-87f8-3233b91c3c01"
      },
      "source": [
        "sns.heatmap(data.corr(),annot=True,cmap='RdYlGn',center=0)"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fe2e0aa5a10>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1rpS-hd4jmiD"
      },
      "source": [
        "## 6.Model Building"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "uaPFT_m0jmiD",
        "outputId": "01063d2d-08ca-4f8f-ea33-d22f0a539d4d"
      },
      "source": [
        "# shuffle the DataFrame rows\n",
        "data = data.sample(frac = 1)\n",
        "data. head()"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sepal length</th>\n",
              "      <th>sepal width</th>\n",
              "      <th>petal length</th>\n",
              "      <th>petal width</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>103</th>\n",
              "      <td>6.3</td>\n",
              "      <td>2.9</td>\n",
              "      <td>5.6</td>\n",
              "      <td>1.8</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>131</th>\n",
              "      <td>7.9</td>\n",
              "      <td>3.8</td>\n",
              "      <td>6.4</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>5.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.6</td>\n",
              "      <td>0.2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     sepal length  sepal width   petal length  petal width  class\n",
              "103           6.3          2.9            5.6          1.8      2\n",
              "131           7.9          3.8            6.4          2.0      2\n",
              "0             5.1          3.5            1.4          0.2      0\n",
              "29            4.7          3.2            1.6          0.2      0\n",
              "25            5.0          3.0            1.6          0.2      0"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8fDNI0Q6jmiE"
      },
      "source": [
        "x = data.drop(['class'], axis =1)\n",
        "y = data['class']"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uc0zs5j-jmiF"
      },
      "source": [
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 0)"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pgiUQk00jmiG"
      },
      "source": [
        "sc=StandardScaler()\n",
        "x_train=sc.fit_transform(x_train)\n",
        "x_test=sc.fit_transform(x_test)"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WtmNAEgZjmiH"
      },
      "source": [
        "### a.Logistic regression"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "twa0Xw0xjmiH",
        "outputId": "0983af18-1897-4fa1-d55c-e3d2bf12c752"
      },
      "source": [
        "#Create an instance and fit the model\n",
        "reg = LogisticRegression(multi_class='multinomial',solver='lbfgs')\n",
        "\n",
        "#Fitting the train and test data\n",
        "reg.fit(x_train, y_train)"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
              "                   multi_class='multinomial', n_jobs=None, penalty='l2',\n",
              "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
              "                   warm_start=False)"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QTVCeBECjmiJ",
        "outputId": "121594b6-91bf-4632-cde0-e344f7808458"
      },
      "source": [
        "y_pred = reg.predict(x_test)\n",
        "y_proba = reg.predict_proba(x_test)\n",
        "y_pred\n"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2, 0, 2, 1, 0, 1, 0, 1, 1, 2, 0, 2, 0, 2, 2, 1, 0, 0, 1, 2, 0, 0,\n",
              "       1, 2, 2, 0, 1, 0, 2, 2, 2, 0, 0, 2, 1, 2, 1, 1, 0, 1, 0, 0, 0, 0,\n",
              "       2], dtype=int8)"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zkfYXpwhjmiK",
        "outputId": "89ab2cec-4235-4691-958b-d75432ccbdc3"
      },
      "source": [
        "score_lr= reg.score(x_test,y_test)\n",
        "print(score_lr)"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9777777777777777\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kUDaHTMQjmiM",
        "outputId": "0994c92e-e00b-4678-c069-7b605f642d3d"
      },
      "source": [
        "actual=y_test\n",
        "predicted=y_pred\n",
        "results=confusion_matrix(actual,predicted)\n",
        "print('confusion matrix')\n",
        "print(results)\n"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "confusion matrix\n",
            "[[18  0  0]\n",
            " [ 0 12  1]\n",
            " [ 0  0 14]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l47nOOnQjmiN"
      },
      "source": [
        "### b. SVM"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bT6dWc4ajmiN",
        "outputId": "5c8c163e-aa72-44cb-fd81-0cb36872be3f"
      },
      "source": [
        "clf = SVC(kernel='linear', C=1.0, random_state=0)\n",
        "clf.fit(x_train, y_train)"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n",
              "    decision_function_shape='ovr', degree=3, gamma='scale', kernel='linear',\n",
              "    max_iter=-1, probability=False, random_state=0, shrinking=True, tol=0.001,\n",
              "    verbose=False)"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kQ-BHf_QjmiO",
        "outputId": "4be8e00e-49ae-4f8c-bd1f-478a5f93ef36"
      },
      "source": [
        "# generate evaluation metrics\n",
        "print (\"Train - Accuracy :\", accuracy_score(y_train, clf.predict(x_train)))\n",
        "print (\"Train - Confusion matrix :\\n\",confusion_matrix(y_train, clf.\n",
        "predict(x_train)))\n"
      ],
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train - Accuracy : 0.9714285714285714\n",
            "Train - Confusion matrix :\n",
            " [[32  0  0]\n",
            " [ 0 34  3]\n",
            " [ 0  0 36]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7y5eNqStjmiP",
        "outputId": "9dc7a8e6-3556-4ae8-930f-241b76098dcd"
      },
      "source": [
        "#print (\"Train - classification report :\", classification_report\n",
        "#(y_train, clf.predict(x_train)))\n",
        "print (\"Test - Accuracy :\", accuracy_score(y_test, clf.predict\n",
        "(x_test)))\n",
        "print (\"Test - Confusion matrix :\\n\",confusion_matrix(y_test, clf.\n",
        "predict(x_test)))"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test - Accuracy : 0.9555555555555556\n",
            "Test - Confusion matrix :\n",
            " [[18  0  0]\n",
            " [ 0 11  2]\n",
            " [ 0  0 14]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9o-3RAYSjmiR"
      },
      "source": [
        "### prdection on given input"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_AIz8rofjmiR",
        "outputId": "f1fac3e2-f546-42e0-e412-7a849e3a9987"
      },
      "source": [
        "num=[[6.4,2.9,4.3,1.3]]\n",
        "num"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[[6.4, 2.9, 4.3, 1.3]]"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0l99r6BOjmiS"
      },
      "source": [
        "num=sc.fit_transform(num)"
      ],
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EAT6RnDxjmiT",
        "outputId": "3daeebe4-c158-47f3-bb2a-222b00670aec"
      },
      "source": [
        "u=clf.predict(num)\n",
        "u[0]"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uxFTmgnWjmiU",
        "outputId": "5117f6af-884c-4e86-f074-5f5d313602b5"
      },
      "source": [
        "rslt = reg.predict(num)\n",
        "rslt[0]"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zq5iFjJrjmiV"
      },
      "source": [
        ""
      ],
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mo3siJzWld8F"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_NVifUIxlfoJ"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wvg4QqIZlkpT"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XMQjO6gNlpPp"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4Y16DYlWlAFV"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EP5c31ZEl2Wp"
      },
      "source": [
        ""
      ]
    }
  ]
}
